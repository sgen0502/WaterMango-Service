{"version":3,"sources":["Model/Models.ts","Component/Header/WaterMangoHeader.tsx","Utils/JsonRestClient.ts","Utils/Config.ts","Container/PlantContainer.ts","Component/WaterMango/Table/PlantStatusChip.tsx","Service/SignalR/PlantStatusSignalRChannel.ts","Container/SignalRContainer.ts","Component/WaterMango/Table/PlantGiveWaterButton.tsx","Component/WaterMango/Table/PlantRow.tsx","Component/WaterMango/Table/PlantTable.tsx","Component/WaterMango/SignalRToContainerComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlantStatus","WaterMangoHeader","props","AppBar","position","Toolbar","Typography","variant","title","JsonRestClient","uri","DefaultHeaders","request","this","axios","create","baseURL","headers","responseType","path","get","body","post","put","AppConfig","uris","base","getAll","update","PlantContainer","plants","state","rows","loadRows","bind","getTyped","response","setRows","data","inputRows","setState","id","input","index","findIndex","p","Container","PlantStatusChip","Fragment","Chip","status","getOutlined","color","WATERING","WAITING","ALERT","getColor","label","getLabel","PlantStatusSignalRChannel","connection","HubConnectionBuilder","withUrl","build","connectionSettings","on","u","m","console","log","d","start","then","catch","invoke","topic","action","lastUpdate","date","SignalRContainer","signalHub","sendStatusUpdate","assign","assignWithArgs","plant","PlantGiveWaterButton","enqueueSnackbar","useSnackbar","handleClick","container","signal","a","concat","String","row","name","to","Button","onClick","PlantRow","TableRow","key","TableCell","moment","lastWaterSession","format","PlantTable","React","useEffect","Table","size","TableHead","map","head","TableBody","getRows","SignalRToContainerComponent","signalrContainer","Headers","App","loading","maxSnack","className","maxWidth","Grid","spacing","item","xs","signalRContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9379b042.chunk.js","sourcesContent":["export interface PlantModel{\r\n    id : number;\r\n    name : string;\r\n    lastUpdate : Date;\r\n    lastWaterSession : Date;\r\n    status : number;\r\n}\r\n\r\nexport enum PlantStatus{\r\n    OPEN = 0, WATERING = 1, WAITING = 2, ALERT = 3\r\n}","import React from 'react';\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\r\n\r\ntype HeaderProps = {\r\n    title: String\r\n}\r\n\r\nconst WaterMangoHeader = (props: HeaderProps) => {\r\n    return(\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" >{props.title}</Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default WaterMangoHeader;","import axios, { AxiosInstance } from 'axios';\r\n\r\nclass JsonRestClient{\r\n    DefaultHeaders = {\r\n        'Content-Type': 'application/json',\r\n        'X-Requested-With': 'XMLHttpRequest'\r\n    }\r\n    request: AxiosInstance | undefined;\r\n\r\n    constructor(uri: string) {\r\n        this.request = axios.create({\r\n            baseURL: uri,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Requested-With': 'XMLHttpRequest'\r\n            },\r\n            responseType: 'json'\r\n        });\r\n    }\r\n\r\n    async get(path: string){\r\n        if(this.request)\r\n            return await this.request.get(path);\r\n    }\r\n\r\n    async getTyped<T>(path: string){\r\n        if(this.request)\r\n            return await this.request.get<T>(path);\r\n    }\r\n\r\n    async post(path: string, body?: any){\r\n        if(this.request)\r\n            return await this.request.post(path, body);\r\n    }\r\n\r\n    async put(path: string, body?: any){\r\n        if(this.request)\r\n            return await this.request.put(path, body);\r\n    }\r\n}\r\n\r\nexport default JsonRestClient;","\r\n//TODO: Replace this to load from ZooKeeper or at least property file\r\nexport const AppConfig = {\r\n    uris: {\r\n        base: \"https://localhost:5001/\",\r\n        getAll: \"api/plants\",\r\n        get: \"api/plants/\",\r\n        update: \"api/plants/\"\r\n    },\r\n    \r\n}","import { Container } from 'unstated'\r\nimport { PlantModel } from '../Model/Models';\r\nimport JsonRestClient from '../Utils/JsonRestClient';\r\nimport { AppConfig } from '../Utils/Config';\r\n\r\ntype PlantContainerState ={\r\n    rows: PlantModel[]\r\n}\r\n\r\nclass PlantContainer extends Container<PlantContainerState> {\r\n    request = new JsonRestClient(AppConfig.uris.base);\r\n    plants: PlantModel[] = [];\r\n    state = {\r\n        rows: []\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.loadRows = this.loadRows.bind(this);    \r\n    }\r\n    \r\n\r\n    async loadRows(){\r\n        let response = await this.request.getTyped<PlantModel[]>(AppConfig.uris.getAll);\r\n        if(response) this.setRows(response.data);\r\n    }\r\n\r\n    setRows(inputRows: PlantModel[]){\r\n        this.plants = inputRows;\r\n        this.setState({rows: inputRows});\r\n    }\r\n\r\n    getRows(){\r\n        return this.state.rows;\r\n    }\r\n\r\n    updateRow(id: number, input: PlantModel){\r\n        const index = this.plants.findIndex(p => p.id === id);\r\n        this.plants[index] = input;\r\n        this.setState({rows: this.plants});\r\n    }\r\n}\r\n\r\nexport default PlantContainer;","import React from 'react';\r\nimport { Chip } from '@material-ui/core';\r\nimport { PlantStatus } from '../../../Model/Models';\r\n\r\n\r\ntype PlantStatusProps = {\r\n    status: number\r\n}\r\n\r\nconst PlantStatusChip = (props: PlantStatusProps) => {\r\n\r\n    const getColor = () => {\r\n        switch(props.status){\r\n            case PlantStatus.WATERING:\r\n                return \"primary\";\r\n            case PlantStatus.WAITING:\r\n                return \"secondary\";\r\n            case PlantStatus.ALERT:\r\n                return \"secondary\";\r\n            default:\r\n                return \"default\";\r\n        }\r\n    }\r\n\r\n    const getOutlined= () => {\r\n        switch(props.status){\r\n            case 3:\r\n                return \"outlined\";\r\n            default:\r\n                return \"default\";\r\n        }\r\n    }\r\n\r\n    const getLabel = () => {\r\n        switch(props.status){\r\n            case PlantStatus.WATERING:\r\n                return \"Giving water\";\r\n            case PlantStatus.WAITING:\r\n                return \"Needs to rest.\";\r\n            case PlantStatus.ALERT:\r\n                return \"Has not been watered for 6 hours!\";\r\n            default:\r\n                return \"Give water!\";\r\n        }\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Chip variant={getOutlined()} color={getColor()} label={getLabel()} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default  PlantStatusChip;","import { HubConnection, HubConnectionBuilder } from '@aspnet/signalr';\r\n\r\nexport default class PlantStatusSignalRChannel{\r\n    private connection: HubConnection;\r\n\r\n    constructor() {\r\n        this.connection = new HubConnectionBuilder().withUrl('https://localhost:5001/plantstatushub').build();\r\n        this.connectionSettings();\r\n\r\n    }\r\n\r\n    private async connectionSettings() {\r\n        // For testing SignalR\r\n        this.connection.on('ReceiveMessage', (u: string, m: string) => {\r\n          console.log(`${u} ${m}`)\r\n        });\r\n        this.connection.on('StatusUpdate', (u: number, m: string, d: Date) => {\r\n            console.log(`${u} ${m} ${d}`)\r\n        });\r\n\r\n        \r\n        // start Connection\r\n        await this.connection.start()\r\n          .then(() => console.log('Connected'))\r\n          .catch(() => console.log('Failed to Connect'));\r\n\r\n        this.connection.invoke('ConnectStateManager')\r\n          .then(() => console.log('Successfully sent a message'))\r\n          .catch(() => console.log('Failed to send a message'));\r\n    } \r\n\r\n    assign(topic: string, action: () => any){\r\n        this.connection.on(topic, () => {\r\n            action();\r\n        });\r\n    }\r\n\r\n    assignWithArgs(topic: string, action: (id: number, status: number, lastUpdate: Date) => any){\r\n        this.connection.on(topic, (id: number, status: number, lastUpdate: Date)=> {\r\n            action(id, status, lastUpdate);\r\n        });\r\n    }\r\n\r\n    invoke(id: number, status: number, date: Date) {\r\n        this.connection.invoke('SendStatusUpdate', id, status, date)\r\n        .then(() => console.log('Successfully sent a message'))\r\n        .catch(() => console.log('Failed to send a message'));\r\n    }\r\n}\r\n","import { Container } from 'unstated'\r\nimport { PlantModel } from '../Model/Models';\r\nimport PlantStatusSignalRChannel from '../Service/SignalR/PlantStatusSignalRChannel';\r\n\r\nclass SignalRContainer extends Container<{}> {\r\n    signalHub: PlantStatusSignalRChannel = new PlantStatusSignalRChannel();\r\n\r\n    constructor() {\r\n        super();\r\n        this.sendStatusUpdate = this.sendStatusUpdate.bind(this);    \r\n        this.assign = this.assign.bind(this); \r\n    }\r\n\r\n    assign(topic: string, action: () => any){\r\n        this.signalHub.assign(topic, action);\r\n    }\r\n\r\n    assignWithArgs(topic: string, action: (id: number, status: number, date: Date) => any){\r\n        this.signalHub.assignWithArgs(topic, action);\r\n    }\r\n\r\n    sendStatusUpdate(plant: PlantModel){\r\n        this.signalHub.invoke(plant.id, plant.status, plant.lastUpdate);\r\n    }\r\n}\r\n\r\nexport default SignalRContainer;","import React from 'react';\r\nimport { Button} from '@material-ui/core';\r\nimport JsonRestClient from '../../../Utils/JsonRestClient';\r\nimport { AppConfig } from '../../../Utils/Config';\r\nimport PlantContainer from '../../../Container/PlantContainer';\r\nimport { PlantModel, PlantStatus } from '../../../Model/Models';\r\nimport {Subscribe } from 'unstated';\r\nimport { useSnackbar } from 'notistack';\r\nimport SignalRContainer from '../../../Container/SignalRContainer';\r\n\r\ntype PlantRowProps = {\r\n    row: PlantModel\r\n}\r\n\r\nconst PlantGiveWaterButton = (props: PlantRowProps) => {\r\n    const request = new JsonRestClient(AppConfig.uris.base);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    \r\n    const handleClick = async (container: PlantContainer, signal: SignalRContainer) =>{\r\n        try{\r\n            await request.put(AppConfig.uris.update.concat(String(props.row.id)));\r\n            container.loadRows();\r\n            signal.sendStatusUpdate(props.row);\r\n        }\r\n        catch{\r\n            enqueueSnackbar(`${props.row.name} is current resting.`, { variant: \"warning\"});\r\n        }\r\n    }\r\n\r\n    const getLabel = () => {\r\n        return props.row.status === PlantStatus.WATERING \r\n               ? `Cancel Watering for ${props.row.name}` \r\n               : `Give Water to ${props.row.name}`;\r\n    }\r\n\r\n    const getColor = () => {\r\n        return props.row.status === PlantStatus.WATERING \r\n               ? \"secondary\"\r\n               : \"primary\"\r\n    }\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Subscribe to={[PlantContainer, SignalRContainer]}>\r\n            { (container: PlantContainer, signal: SignalRContainer) => (\r\n                    <Button variant=\"contained\" color={getColor()} onClick={() => handleClick(container, signal)}>{getLabel()}</Button>\r\n            )}\r\n            </Subscribe>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PlantGiveWaterButton;","import React from 'react';\r\nimport { TableRow, TableCell} from '@material-ui/core';\r\nimport PlantContainer from '../../../Container/PlantContainer';\r\nimport { PlantModel } from '../../../Model/Models';\r\nimport moment from 'moment';\r\nimport {Subscribe } from 'unstated';\r\nimport PlantStatusChip from './PlantStatusChip';\r\nimport PlantGiveWaterButton from './PlantGiveWaterButton';\r\n\r\ntype PlantRowProps = {\r\n    row: PlantModel\r\n}\r\n\r\nconst PlantRow = (props: PlantRowProps) => {\r\n    return(\r\n        <React.Fragment>\r\n            <Subscribe to={[PlantContainer]}>\r\n            { () => (\r\n                <TableRow key={props.row.id}>\r\n                    <TableCell>{props.row.name}</TableCell>\r\n                    <TableCell>{moment(props.row.lastWaterSession).format(\"YYYY-MM-DD HH:mm:ss\")}</TableCell>\r\n                    <TableCell><PlantStatusChip status={props.row.status}/></TableCell>\r\n                    <TableCell>\r\n                        <PlantGiveWaterButton row={props.row}></PlantGiveWaterButton>\r\n                    </TableCell>\r\n                </TableRow>\r\n            )}\r\n            </Subscribe>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PlantRow;","import React from 'react';\r\nimport { Typography, TableHead, TableRow, TableCell, TableBody, Table } from '@material-ui/core';\r\nimport { PlantModel } from '../../../Model/Models';\r\nimport PlantRow from './PlantRow';\r\nimport PlantContainer from '../../../Container/PlantContainer';\r\n\r\ntype TableProps = {\r\n    title: string,\r\n    headers: string[],\r\n    container : PlantContainer\r\n}\r\n\r\nconst PlantTable = (props: TableProps) => {\r\n    \r\n    React.useEffect(() => {\r\n        props.container.loadRows();\r\n    }, [props.container])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" >{props.title}</Typography>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {props.headers.map(head => <TableCell key={head}>{head}</TableCell>)}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                       {props.container.getRows().map((row: PlantModel) => <PlantRow key={row.id} row={row} />)}\r\n                </TableBody>\r\n            </Table>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PlantTable;","import React from 'react'\r\nimport PlantContainer from '../../Container/PlantContainer'\r\nimport SignalRContainer from '../../Container/SignalRContainer';\r\nimport { useSnackbar } from 'notistack';\r\nimport { PlantStatus } from '../../Model/Models';\r\n\r\ntype SignalRToContainerProps = {\r\n    container: PlantContainer,\r\n    signalrContainer: SignalRContainer\r\n}\r\n\r\nexport const SignalRToContainerComponent = (props: SignalRToContainerProps) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    React.useEffect(() =>{\r\n        props.signalrContainer.assign(\"StatusUpdate\", props.container.loadRows);\r\n        props.signalrContainer.assignWithArgs(\"StatusUpdate\", (id: number, status: number, date: Date) => {\r\n            if(status === PlantStatus.ALERT) enqueueSnackbar(`Alert! Plant ID = ${id} is not watered for 6 hours.`, { variant: \"error\"})\r\n        });\r\n    }, [enqueueSnackbar, props.container.loadRows, props.signalrContainer])\r\n    \r\n    return (\r\n        <div/>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Container, Grid} from '@material-ui/core';\r\nimport WaterMangoHeader from './Component/Header/WaterMangoHeader';\r\nimport PlantTable from './Component/WaterMango/Table/PlantTable';\r\nimport { Provider, Subscribe } from 'unstated'\r\nimport PlantContainer from './Container/PlantContainer';\r\nimport { SignalRToContainerComponent } from './Component/WaterMango/SignalRToContainerComponent';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport SignalRContainer from './Container/SignalRContainer';\r\n\r\ntype AppState = {\r\n    loading: boolean\r\n}\r\n\r\nconst Headers: string[] = [\"Name\", \"When did water?\", \"Status\", \"Give Water!\"]\r\n\r\nclass App extends Component<{}, AppState>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { loading: true };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Provider>\r\n            <SnackbarProvider maxSnack={3}>\r\n            <div>\r\n                <WaterMangoHeader title=\"Water Mango\"/>\r\n                <main>\r\n                    <div className=\"content\">\r\n                        <Container maxWidth=\"lg\">\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                <Subscribe to={[PlantContainer]}> \r\n                                    { (container: PlantContainer) => (\r\n                                        <PlantTable title=\"Plants Status\" headers={Headers} container={container}/>\r\n                                    )}\r\n                                </Subscribe>\r\n                                <Subscribe to={[PlantContainer, SignalRContainer]}> \r\n                                    { (container: PlantContainer, signalRContainer: SignalRContainer) => (\r\n                                        <SignalRToContainerComponent container={container} signalrContainer={signalRContainer}/>\r\n                                    )}\r\n                                </Subscribe>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Container>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n            </SnackbarProvider>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}